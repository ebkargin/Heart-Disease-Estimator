# -*- coding: utf-8 -*-
"""KararKılınanSet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RDNo7ms5PrYgwyJw9p9xhxwR3eJuoDpc
"""

import pandas as pd
import numpy as np
import matplotlib as plt
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df=pd.read_csv('/content/cardio_train.csv',sep=';')

df = df.rename(columns={
    "id": "id",
    "age": "yas_gun",  # Gün cinsinden yaş
    "gender": "cinsiyet",  # 1 = Kadın, 2 = Erkek
    "height": "boy_cm",
    "weight": "kilo_kg",
    "ap_hi": "buyuk_tansiyon",  # Sistolik (büyük tansiyon)
    "ap_lo": "kucuk_tansiyon",  # Diyastolik (küçük tansiyon)
    "cholesterol": "kolesterol",  # 1: Normal, 2: Yüksek, 3: Çok yüksek
    "gluc": "glukoz",             # 1: Normal, 2: Yüksek, 3: Çok yüksek
    "smoke": "sigara_iciyor",    # 0: Hayır, 1: Evet
    "alco": "alkol_aliyor",      # 0: Hayır, 1: Evet
    "active": "fiziksel_aktif",  # 0: Hayır, 1: Evet
    "cardio": "kalp_hastaligi"   # 0: Yok, 1: Var (hedef değişken)
})

df.info()

df.head()



sns.histplot(data=df,x="kilo_kg")

sns.scatterplot(data=df,x="kilo_kg",y="boy_cm")
plt.title("Kalp Hastalıklarında Boy ile Kilogram Arasındaki İlişki")
plt.xlabel("Kilogram")
plt.ylabel("Boy (cm)")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler

x=df.drop("kalp_hastaligi",axis=1)
y=df["kalp_hastaligi"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.15)

KNN_data_model=KNeighborsClassifier(n_neighbors=3)
KNN_data_model.fit(x_train,y_train)

predict_value=KNN_data_model.predict(x_test)

accuracy_score(y_test,predict_value)

from sklearn.metrics import classification_report
classification_report(y_test,predict_value,output_dict=True)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt


predict_value = KNN_data_model.predict(x_test)

cm = confusion_matrix(y_test, predict_value)

print("Confusion Matrix:\n", cm)

from sklearn.metrics import roc_auc_score
# from sklearn.preprocessing import label_binarize # Bu import artık gerekli değil

# Eğer çok sınıflı bir problemse (örneğin 3 sınıf)
# Sınıf etiketlerini binarize et
# y_test_bin = label_binarize(y_test, classes=sorted(set(y_test))) # Binary sınıflandırma için gerekli değil

# Modelin sınıf olasılıklarını al
y_proba = KNN_data_model.predict_proba(x_test)

# ROC AUC skorunu hesapla
# İkinci sütun, yani pozitif sınıfın olasılıklarını kullanıyoruz.
roc_auc = roc_auc_score(y_test, y_proba[:, 1])
print("ROC AUC Score:", roc_auc)