# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vmy5r9GhaXBYvX13OxlbWmeyrE-agAtt
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix,roc_auc_score,RocCurveDisplay
from sklearn.preprocessing import MinMaxScaler,StandardScaler




df = pd.read_csv("cardio_train.csv",delimiter=";")

df.head(3)

df = df.rename(columns={  # Sütunlar Türkçeleştirildi.
        "id": "id",
        "age": "yas",
        "gender": "cinsiyet",
        "height": "boy_cm",
        "weight": "kilo_kg",
        "ap_hi": "buyuk_tansiyon",
        "ap_lo": "kucuk_tansiyon",
        "cholesterol": "kolesterol",
        "gluc": "glukoz",
        "smoke": "sigara_iciyor",
        "alco": "alkol_aliyor",
        "active": "fiziksel_aktif",
        "cardio": "kalp_hastaligi"
    })

df.head(3)
df.drop("id",axis=1,inplace=True) #Gereksiz bir sütun olduğu için kaldırdım.
df.head(3)

df['bmi'] = df['kilo_kg'] / ((df['boy_cm'] / 100) ** 2) # Modelin daha tutarlı sonuçlar vermesi için ek olarak böyle bir bilgi ekledim.

y = df["kalp_hastaligi"]                 #Ulaşmak istediğimiz değer.
x = df.drop("kalp_hastaligi",axis=1)     #eğitelecek ve test edilecek parametreler

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=42) 

log = LogisticRegression()          # ilk olarak normal lojistik regresyon denemesi için model kurulması.
model = log.fit(x_train,y_train)

print(model.score(x_test,y_test))

y_pred = model.predict(x_test)      
print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))

#Lojistik REgresyon da Eğer bir özellik 0–1000 aralığında, diğeri 0–1 aralığındaysa, model büyük aralıklara sahip değişkenlere daha çok önem verir — bu da öğrenmeyi bozabilir.
#Bunun için MinMaxScaler kullanarak tüm değerleri 0-1 aralığına hapsetmeyi deneriz .Böylelikle daha tutarlı snuçlarla karşılaşacağımızı umarız 

#sayısal ve kategorisel sınıfları ayırıp, sayısal olanlara (kg/cm gibi) MinMaxscaler uygulayacağız.
df_numeric = df[["yas","boy_cm","kilo_kg","buyuk_tansiyon","kucuk_tansiyon","bmi"]]
df_classifer = df.drop(["yas","boy_cm","kilo_kg","buyuk_tansiyon","kucuk_tansiyon","bmi"],axis=1)

df_numeric.head(3)
df_classifer.head(3)

# MinMaxScaler Modeli 
print("MinMax Scaler")
scaler = MinMaxScaler()
numeric_scaled = pd.DataFrame(scaler.fit_transform(df_numeric), columns=df_numeric.columns)  # Sayısal olarak ayırdığımız verilere scaler uygularız.
print("--------MinMax Scaler------")
print(numeric_scaled.head(5))
print("-----------------------------")
df_new =pd.concat([numeric_scaled, df_classifer], axis=1) # düzenlediğimiz verileri tekrar birleştiririz.

X = df_new.drop("kalp_hastaligi",axis=1)
Y = df_new["kalp_hastaligi"]

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=100)

log_combined = LogisticRegression()
model_combined = log_combined.fit(X_train,Y_train)

print(model_combined.score(X_test,Y_test))
y_pred_new = model_combined.predict(X_test)
print(classification_report(Y_test,y_pred_new))
print(confusion_matrix(Y_test,y_pred_new))
print("---------------------------------------")

# Standart Scaler
print("Standart Scaler")                        # En iyi sonucu veren scaler tipi
scaler_standart = StandardScaler()
numeric_scaled_standart = pd.DataFrame(scaler_standart.fit_transform(df_numeric), columns=df_numeric.columns)
print("--------Standart Scaler------")
print(numeric_scaled_standart.head(5))
print("-----------------------------")
df_new_standart =pd.concat([numeric_scaled_standart, df_classifer], axis=1)

X = df_new_standart.drop("kalp_hastaligi",axis=1)
Y = df_new_standart["kalp_hastaligi"]

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=5)
log_combined = LogisticRegression()
model_combined = log_combined.fit(X_train,Y_train)
print(model_combined.score(X_test,Y_test))

y_pred_new = model_combined.predict(X_test)
print(classification_report(Y_test,y_pred_new))
print(confusion_matrix(Y_test,y_pred_new))

y_proba = model_combined.predict_proba(X_test)[:, 1]
print("R_AUC",roc_auc_score(Y_test,y_proba))
RocCurveDisplay.from_estimator(model_combined, X_test, Y_test)
plt.title("ROC Curve")
plt.show()
print("---------------------------------------")

df_new_standart.head(5)



